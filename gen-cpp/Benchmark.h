/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Benchmark_H
#define Benchmark_H

#include <thrift/TDispatchProcessor.h>
#include "benchmark_types.h"

namespace benchmark {

class BenchmarkIf {
 public:
  virtual ~BenchmarkIf() {}
  virtual void sendMarketData(MarketData& _return, const MarketData& marketData) = 0;
  virtual void sendQuoteRequest(QuoteRequest& _return, const QuoteRequest& quoteRequest) = 0;
};

class BenchmarkIfFactory {
 public:
  typedef BenchmarkIf Handler;

  virtual ~BenchmarkIfFactory() {}

  virtual BenchmarkIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BenchmarkIf* /* handler */) = 0;
};

class BenchmarkIfSingletonFactory : virtual public BenchmarkIfFactory {
 public:
  BenchmarkIfSingletonFactory(const boost::shared_ptr<BenchmarkIf>& iface) : iface_(iface) {}
  virtual ~BenchmarkIfSingletonFactory() {}

  virtual BenchmarkIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BenchmarkIf* /* handler */) {}

 protected:
  boost::shared_ptr<BenchmarkIf> iface_;
};

class BenchmarkNull : virtual public BenchmarkIf {
 public:
  virtual ~BenchmarkNull() {}
  void sendMarketData(MarketData& /* _return */, const MarketData& /* marketData */) {
    return;
  }
  void sendQuoteRequest(QuoteRequest& /* _return */, const QuoteRequest& /* quoteRequest */) {
    return;
  }
};

typedef struct _Benchmark_sendMarketData_args__isset {
  _Benchmark_sendMarketData_args__isset() : marketData(false) {}
  bool marketData;
} _Benchmark_sendMarketData_args__isset;

class Benchmark_sendMarketData_args {
 public:

  Benchmark_sendMarketData_args() {
  }

  virtual ~Benchmark_sendMarketData_args() throw() {}

  MarketData marketData;

  _Benchmark_sendMarketData_args__isset __isset;

  void __set_marketData(const MarketData& val) {
    marketData = val;
  }

  bool operator == (const Benchmark_sendMarketData_args & rhs) const
  {
    if (!(marketData == rhs.marketData))
      return false;
    return true;
  }
  bool operator != (const Benchmark_sendMarketData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Benchmark_sendMarketData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Benchmark_sendMarketData_pargs {
 public:


  virtual ~Benchmark_sendMarketData_pargs() throw() {}

  const MarketData* marketData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Benchmark_sendMarketData_result__isset {
  _Benchmark_sendMarketData_result__isset() : success(false) {}
  bool success;
} _Benchmark_sendMarketData_result__isset;

class Benchmark_sendMarketData_result {
 public:

  Benchmark_sendMarketData_result() {
  }

  virtual ~Benchmark_sendMarketData_result() throw() {}

  MarketData success;

  _Benchmark_sendMarketData_result__isset __isset;

  void __set_success(const MarketData& val) {
    success = val;
  }

  bool operator == (const Benchmark_sendMarketData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Benchmark_sendMarketData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Benchmark_sendMarketData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Benchmark_sendMarketData_presult__isset {
  _Benchmark_sendMarketData_presult__isset() : success(false) {}
  bool success;
} _Benchmark_sendMarketData_presult__isset;

class Benchmark_sendMarketData_presult {
 public:


  virtual ~Benchmark_sendMarketData_presult() throw() {}

  MarketData* success;

  _Benchmark_sendMarketData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Benchmark_sendQuoteRequest_args__isset {
  _Benchmark_sendQuoteRequest_args__isset() : quoteRequest(false) {}
  bool quoteRequest;
} _Benchmark_sendQuoteRequest_args__isset;

class Benchmark_sendQuoteRequest_args {
 public:

  Benchmark_sendQuoteRequest_args() {
  }

  virtual ~Benchmark_sendQuoteRequest_args() throw() {}

  QuoteRequest quoteRequest;

  _Benchmark_sendQuoteRequest_args__isset __isset;

  void __set_quoteRequest(const QuoteRequest& val) {
    quoteRequest = val;
  }

  bool operator == (const Benchmark_sendQuoteRequest_args & rhs) const
  {
    if (!(quoteRequest == rhs.quoteRequest))
      return false;
    return true;
  }
  bool operator != (const Benchmark_sendQuoteRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Benchmark_sendQuoteRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Benchmark_sendQuoteRequest_pargs {
 public:


  virtual ~Benchmark_sendQuoteRequest_pargs() throw() {}

  const QuoteRequest* quoteRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Benchmark_sendQuoteRequest_result__isset {
  _Benchmark_sendQuoteRequest_result__isset() : success(false) {}
  bool success;
} _Benchmark_sendQuoteRequest_result__isset;

class Benchmark_sendQuoteRequest_result {
 public:

  Benchmark_sendQuoteRequest_result() {
  }

  virtual ~Benchmark_sendQuoteRequest_result() throw() {}

  QuoteRequest success;

  _Benchmark_sendQuoteRequest_result__isset __isset;

  void __set_success(const QuoteRequest& val) {
    success = val;
  }

  bool operator == (const Benchmark_sendQuoteRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Benchmark_sendQuoteRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Benchmark_sendQuoteRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Benchmark_sendQuoteRequest_presult__isset {
  _Benchmark_sendQuoteRequest_presult__isset() : success(false) {}
  bool success;
} _Benchmark_sendQuoteRequest_presult__isset;

class Benchmark_sendQuoteRequest_presult {
 public:


  virtual ~Benchmark_sendQuoteRequest_presult() throw() {}

  QuoteRequest* success;

  _Benchmark_sendQuoteRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BenchmarkClient : virtual public BenchmarkIf {
 public:
  BenchmarkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BenchmarkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendMarketData(MarketData& _return, const MarketData& marketData);
  void send_sendMarketData(const MarketData& marketData);
  void recv_sendMarketData(MarketData& _return);
  void sendQuoteRequest(QuoteRequest& _return, const QuoteRequest& quoteRequest);
  void send_sendQuoteRequest(const QuoteRequest& quoteRequest);
  void recv_sendQuoteRequest(QuoteRequest& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BenchmarkProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BenchmarkIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BenchmarkProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendMarketData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendQuoteRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BenchmarkProcessor(boost::shared_ptr<BenchmarkIf> iface) :
    iface_(iface) {
    processMap_["sendMarketData"] = &BenchmarkProcessor::process_sendMarketData;
    processMap_["sendQuoteRequest"] = &BenchmarkProcessor::process_sendQuoteRequest;
  }

  virtual ~BenchmarkProcessor() {}
};

class BenchmarkProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BenchmarkProcessorFactory(const ::boost::shared_ptr< BenchmarkIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BenchmarkIfFactory > handlerFactory_;
};

class BenchmarkMultiface : virtual public BenchmarkIf {
 public:
  BenchmarkMultiface(std::vector<boost::shared_ptr<BenchmarkIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BenchmarkMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BenchmarkIf> > ifaces_;
  BenchmarkMultiface() {}
  void add(boost::shared_ptr<BenchmarkIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendMarketData(MarketData& _return, const MarketData& marketData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMarketData(_return, marketData);
    }
    ifaces_[i]->sendMarketData(_return, marketData);
    return;
  }

  void sendQuoteRequest(QuoteRequest& _return, const QuoteRequest& quoteRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendQuoteRequest(_return, quoteRequest);
    }
    ifaces_[i]->sendQuoteRequest(_return, quoteRequest);
    return;
  }

};

} // namespace

#endif
