/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef benchmark_TYPES_H
#define benchmark_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace benchmark {

typedef struct _MarketDataEntry__isset {
  _MarketDataEntry__isset() : mdUpdateAction(false), mdPriceLevel(false), mdEntryType(false), openCloseSettleFlag(false), securityIDSource(false), securityID(false), rptSeq(false), mdEntryPx(false), mdEntryTime(false), mdEntrySize(false), numberOfOrders(false), tradingSessionID(false), netChgPrevDay(false), tradeVolume(false), tradeCondition(false), tickDirection(false), quoteCondition(false), aggressorSide(false), matchEventIndicator(false), dummy1(false), dummy2(false) {}
  bool mdUpdateAction;
  bool mdPriceLevel;
  bool mdEntryType;
  bool openCloseSettleFlag;
  bool securityIDSource;
  bool securityID;
  bool rptSeq;
  bool mdEntryPx;
  bool mdEntryTime;
  bool mdEntrySize;
  bool numberOfOrders;
  bool tradingSessionID;
  bool netChgPrevDay;
  bool tradeVolume;
  bool tradeCondition;
  bool tickDirection;
  bool quoteCondition;
  bool aggressorSide;
  bool matchEventIndicator;
  bool dummy1;
  bool dummy2;
} _MarketDataEntry__isset;

class MarketDataEntry {
 public:

  static const char* ascii_fingerprint; // = "C297A413C86ACA09582CBD483FA14AAF";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x97,0xA4,0x13,0xC8,0x6A,0xCA,0x09,0x58,0x2C,0xBD,0x48,0x3F,0xA1,0x4A,0xAF};

  MarketDataEntry() : mdUpdateAction(0), mdPriceLevel(0), mdEntryType(0), openCloseSettleFlag(0), securityIDSource(0), securityID(0), rptSeq(0), mdEntryPx(0), mdEntryTime(0), mdEntrySize(0), numberOfOrders(0), tradingSessionID(0), netChgPrevDay(0), tradeVolume(0), tradeCondition(0), tickDirection(0), quoteCondition(0), aggressorSide(0), matchEventIndicator(0), dummy1(0), dummy2(0) {
  }

  virtual ~MarketDataEntry() throw() {}

  int32_t mdUpdateAction;
  int32_t mdPriceLevel;
  double mdEntryType;
  int32_t openCloseSettleFlag;
  int32_t securityIDSource;
  int32_t securityID;
  int32_t rptSeq;
  double mdEntryPx;
  int32_t mdEntryTime;
  int32_t mdEntrySize;
  int32_t numberOfOrders;
  double tradingSessionID;
  double netChgPrevDay;
  int32_t tradeVolume;
  double tradeCondition;
  double tickDirection;
  double quoteCondition;
  int32_t aggressorSide;
  double matchEventIndicator;
  double dummy1;
  int32_t dummy2;

  _MarketDataEntry__isset __isset;

  void __set_mdUpdateAction(const int32_t val) {
    mdUpdateAction = val;
  }

  void __set_mdPriceLevel(const int32_t val) {
    mdPriceLevel = val;
  }

  void __set_mdEntryType(const double val) {
    mdEntryType = val;
  }

  void __set_openCloseSettleFlag(const int32_t val) {
    openCloseSettleFlag = val;
  }

  void __set_securityIDSource(const int32_t val) {
    securityIDSource = val;
  }

  void __set_securityID(const int32_t val) {
    securityID = val;
  }

  void __set_rptSeq(const int32_t val) {
    rptSeq = val;
  }

  void __set_mdEntryPx(const double val) {
    mdEntryPx = val;
  }

  void __set_mdEntryTime(const int32_t val) {
    mdEntryTime = val;
  }

  void __set_mdEntrySize(const int32_t val) {
    mdEntrySize = val;
  }

  void __set_numberOfOrders(const int32_t val) {
    numberOfOrders = val;
  }

  void __set_tradingSessionID(const double val) {
    tradingSessionID = val;
  }

  void __set_netChgPrevDay(const double val) {
    netChgPrevDay = val;
  }

  void __set_tradeVolume(const int32_t val) {
    tradeVolume = val;
  }

  void __set_tradeCondition(const double val) {
    tradeCondition = val;
  }

  void __set_tickDirection(const double val) {
    tickDirection = val;
  }

  void __set_quoteCondition(const double val) {
    quoteCondition = val;
  }

  void __set_aggressorSide(const int32_t val) {
    aggressorSide = val;
  }

  void __set_matchEventIndicator(const double val) {
    matchEventIndicator = val;
  }

  void __set_dummy1(const double val) {
    dummy1 = val;
  }

  void __set_dummy2(const int32_t val) {
    dummy2 = val;
  }

  bool operator == (const MarketDataEntry & rhs) const
  {
    if (!(mdUpdateAction == rhs.mdUpdateAction))
      return false;
    if (!(mdPriceLevel == rhs.mdPriceLevel))
      return false;
    if (!(mdEntryType == rhs.mdEntryType))
      return false;
    if (!(openCloseSettleFlag == rhs.openCloseSettleFlag))
      return false;
    if (!(securityIDSource == rhs.securityIDSource))
      return false;
    if (!(securityID == rhs.securityID))
      return false;
    if (!(rptSeq == rhs.rptSeq))
      return false;
    if (!(mdEntryPx == rhs.mdEntryPx))
      return false;
    if (!(mdEntryTime == rhs.mdEntryTime))
      return false;
    if (!(mdEntrySize == rhs.mdEntrySize))
      return false;
    if (!(numberOfOrders == rhs.numberOfOrders))
      return false;
    if (!(tradingSessionID == rhs.tradingSessionID))
      return false;
    if (!(netChgPrevDay == rhs.netChgPrevDay))
      return false;
    if (!(tradeVolume == rhs.tradeVolume))
      return false;
    if (!(tradeCondition == rhs.tradeCondition))
      return false;
    if (!(tickDirection == rhs.tickDirection))
      return false;
    if (!(quoteCondition == rhs.quoteCondition))
      return false;
    if (!(aggressorSide == rhs.aggressorSide))
      return false;
    if (!(matchEventIndicator == rhs.matchEventIndicator))
      return false;
    if (!(dummy1 == rhs.dummy1))
      return false;
    if (!(dummy2 == rhs.dummy2))
      return false;
    return true;
  }
  bool operator != (const MarketDataEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarketDataEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarketDataEntry &a, MarketDataEntry &b);

typedef struct _MarketData__isset {
  _MarketData__isset() : isEcho(false), counter(false), securityID(false), applVersionID(false), messageType(false), senderCompID(false), msgSeqNum(false), sendingTime(false), tradeDate(false), mdEntries(false) {}
  bool isEcho;
  bool counter;
  bool securityID;
  bool applVersionID;
  bool messageType;
  bool senderCompID;
  bool msgSeqNum;
  bool sendingTime;
  bool tradeDate;
  bool mdEntries;
} _MarketData__isset;

class MarketData {
 public:

  static const char* ascii_fingerprint; // = "B81D2C0D404EC2D873B9569707FCAACD";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x1D,0x2C,0x0D,0x40,0x4E,0xC2,0xD8,0x73,0xB9,0x56,0x97,0x07,0xFC,0xAA,0xCD};

  MarketData() : isEcho(0), counter(0), securityID(0), applVersionID(0), messageType(0), senderCompID(0), msgSeqNum(0), sendingTime(0), tradeDate(0) {
  }

  virtual ~MarketData() throw() {}

  bool isEcho;
  int32_t counter;
  int32_t securityID;
  double applVersionID;
  double messageType;
  double senderCompID;
  int32_t msgSeqNum;
  int32_t sendingTime;
  int32_t tradeDate;
  std::vector<MarketDataEntry>  mdEntries;

  _MarketData__isset __isset;

  void __set_isEcho(const bool val) {
    isEcho = val;
  }

  void __set_counter(const int32_t val) {
    counter = val;
  }

  void __set_securityID(const int32_t val) {
    securityID = val;
  }

  void __set_applVersionID(const double val) {
    applVersionID = val;
  }

  void __set_messageType(const double val) {
    messageType = val;
  }

  void __set_senderCompID(const double val) {
    senderCompID = val;
  }

  void __set_msgSeqNum(const int32_t val) {
    msgSeqNum = val;
  }

  void __set_sendingTime(const int32_t val) {
    sendingTime = val;
  }

  void __set_tradeDate(const int32_t val) {
    tradeDate = val;
  }

  void __set_mdEntries(const std::vector<MarketDataEntry> & val) {
    mdEntries = val;
  }

  bool operator == (const MarketData & rhs) const
  {
    if (!(isEcho == rhs.isEcho))
      return false;
    if (!(counter == rhs.counter))
      return false;
    if (!(securityID == rhs.securityID))
      return false;
    if (!(applVersionID == rhs.applVersionID))
      return false;
    if (!(messageType == rhs.messageType))
      return false;
    if (!(senderCompID == rhs.senderCompID))
      return false;
    if (!(msgSeqNum == rhs.msgSeqNum))
      return false;
    if (!(sendingTime == rhs.sendingTime))
      return false;
    if (!(tradeDate == rhs.tradeDate))
      return false;
    if (!(mdEntries == rhs.mdEntries))
      return false;
    return true;
  }
  bool operator != (const MarketData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarketData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarketData &a, MarketData &b);

typedef struct _RelatedSym__isset {
  _RelatedSym__isset() : symbol(false), orderQuantity(false), side(false), transactTime(false), quoteType(false), securityID(false), securityIDSource(false), dummy1(false), dummy2(false) {}
  bool symbol;
  bool orderQuantity;
  bool side;
  bool transactTime;
  bool quoteType;
  bool securityID;
  bool securityIDSource;
  bool dummy1;
  bool dummy2;
} _RelatedSym__isset;

class RelatedSym {
 public:

  static const char* ascii_fingerprint; // = "42BD3752F8BCBAC526D1BBEA67B7DE3C";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0xBD,0x37,0x52,0xF8,0xBC,0xBA,0xC5,0x26,0xD1,0xBB,0xEA,0x67,0xB7,0xDE,0x3C};

  RelatedSym() : symbol(0), orderQuantity(0), side(0), transactTime(0), quoteType(0), securityID(0), securityIDSource(0), dummy1(0), dummy2(0) {
  }

  virtual ~RelatedSym() throw() {}

  double symbol;
  int64_t orderQuantity;
  int32_t side;
  int64_t transactTime;
  int32_t quoteType;
  int32_t securityID;
  int32_t securityIDSource;
  double dummy1;
  int32_t dummy2;

  _RelatedSym__isset __isset;

  void __set_symbol(const double val) {
    symbol = val;
  }

  void __set_orderQuantity(const int64_t val) {
    orderQuantity = val;
  }

  void __set_side(const int32_t val) {
    side = val;
  }

  void __set_transactTime(const int64_t val) {
    transactTime = val;
  }

  void __set_quoteType(const int32_t val) {
    quoteType = val;
  }

  void __set_securityID(const int32_t val) {
    securityID = val;
  }

  void __set_securityIDSource(const int32_t val) {
    securityIDSource = val;
  }

  void __set_dummy1(const double val) {
    dummy1 = val;
  }

  void __set_dummy2(const int32_t val) {
    dummy2 = val;
  }

  bool operator == (const RelatedSym & rhs) const
  {
    if (!(symbol == rhs.symbol))
      return false;
    if (!(orderQuantity == rhs.orderQuantity))
      return false;
    if (!(side == rhs.side))
      return false;
    if (!(transactTime == rhs.transactTime))
      return false;
    if (!(quoteType == rhs.quoteType))
      return false;
    if (!(securityID == rhs.securityID))
      return false;
    if (!(securityIDSource == rhs.securityIDSource))
      return false;
    if (!(dummy1 == rhs.dummy1))
      return false;
    if (!(dummy2 == rhs.dummy2))
      return false;
    return true;
  }
  bool operator != (const RelatedSym &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RelatedSym & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RelatedSym &a, RelatedSym &b);

typedef struct _QuoteRequest__isset {
  _QuoteRequest__isset() : isEcho(false), counter(false), securityID(false), applVersionID(false), messageType(false), senderCompID(false), msgSeqNum(false), sendingTime(false), quoteReqID(false), related(false) {}
  bool isEcho;
  bool counter;
  bool securityID;
  bool applVersionID;
  bool messageType;
  bool senderCompID;
  bool msgSeqNum;
  bool sendingTime;
  bool quoteReqID;
  bool related;
} _QuoteRequest__isset;

class QuoteRequest {
 public:

  static const char* ascii_fingerprint; // = "504CC738B7BF6DE7EBC19272D97E065C";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x4C,0xC7,0x38,0xB7,0xBF,0x6D,0xE7,0xEB,0xC1,0x92,0x72,0xD9,0x7E,0x06,0x5C};

  QuoteRequest() : isEcho(0), counter(0), securityID(0), applVersionID(0), messageType(0), senderCompID(0), msgSeqNum(0), sendingTime(0), quoteReqID(0) {
  }

  virtual ~QuoteRequest() throw() {}

  bool isEcho;
  int32_t counter;
  int32_t securityID;
  double applVersionID;
  double messageType;
  double senderCompID;
  int32_t msgSeqNum;
  int32_t sendingTime;
  double quoteReqID;
  std::vector<RelatedSym>  related;

  _QuoteRequest__isset __isset;

  void __set_isEcho(const bool val) {
    isEcho = val;
  }

  void __set_counter(const int32_t val) {
    counter = val;
  }

  void __set_securityID(const int32_t val) {
    securityID = val;
  }

  void __set_applVersionID(const double val) {
    applVersionID = val;
  }

  void __set_messageType(const double val) {
    messageType = val;
  }

  void __set_senderCompID(const double val) {
    senderCompID = val;
  }

  void __set_msgSeqNum(const int32_t val) {
    msgSeqNum = val;
  }

  void __set_sendingTime(const int32_t val) {
    sendingTime = val;
  }

  void __set_quoteReqID(const double val) {
    quoteReqID = val;
  }

  void __set_related(const std::vector<RelatedSym> & val) {
    related = val;
  }

  bool operator == (const QuoteRequest & rhs) const
  {
    if (!(isEcho == rhs.isEcho))
      return false;
    if (!(counter == rhs.counter))
      return false;
    if (!(securityID == rhs.securityID))
      return false;
    if (!(applVersionID == rhs.applVersionID))
      return false;
    if (!(messageType == rhs.messageType))
      return false;
    if (!(senderCompID == rhs.senderCompID))
      return false;
    if (!(msgSeqNum == rhs.msgSeqNum))
      return false;
    if (!(sendingTime == rhs.sendingTime))
      return false;
    if (!(quoteReqID == rhs.quoteReqID))
      return false;
    if (!(related == rhs.related))
      return false;
    return true;
  }
  bool operator != (const QuoteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuoteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuoteRequest &a, QuoteRequest &b);

} // namespace

#endif
